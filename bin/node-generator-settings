#!/usr/bin/env node

const program = require('commander');
const chalk = require('chalk');
const Settings = require('../src/settings');

program
  .option('-r, --router-destination <destination>', 'Set router default destination')
  .option('-m, --model-destination <destination>', 'Set model default destination')
  .option('-c, --controller-destination <destination>', 'Set controller default destination')
  .option('-t, --template-path <destination>', 'Set default template directory')
  .option('-g, --global', 'Set global settings')
  .option('-l, --log', 'Log global or local settings depending on global flag')
  .parse(process.argv);

if (program.log) {
  console.log();

  if(program.global)
  {
    console.log(chalk.green('Global settings:'));
    Settings.logSettings(Settings.getSettings({}, true));
  }
  else
  {
    console.log(chalk.green('Local settings:'));
    Settings.logSettings(Settings.getLocalSettings());
  }

  process.exit(1);
}

const settings = {};

if (program.modelDestination) {
  settings['modelDestination'] = program.modelDestination;
}

if (program.controllerDestination) {
  settings['controllerDestination'] = program.controllerDestination;
}

if (program.routerDestination) {
  settings['routerDestination'] = program.routerDestination;
}

if (program.templatePath) {
  settings['templatePath'] = program.templatePath;
}

if(Object.keys(settings).length == 0)
{
  console.log();
  console.log(chalk.green(`Settings:`));
  Settings.logSettings(Settings.getSettings());
  process.exit(1);
}

if(program.global){
  Settings.setGlobalSettings(settings);

  console.log();
  console.log(chalk.green('Global settings updated:'));
  Settings.logSettings(Settings.getSettings({}, true));
}
else {
  const updatedSettings = Object.assign({}, Settings.getLocalSettings(), settings);
  Settings.setLocalSettings(updatedSettings);

  console.log();
  console.log(chalk.green('Local settings updated:'));
  Settings.logSettings(updatedSettings);
}


